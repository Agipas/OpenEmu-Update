; Small C HuC6280 (v0.2, 08/Nov/97)
;
; Taken to HuC (22/Feb/00)
;
;
; This file generated by HuC (v3.21, 2005/04/09, Denki release)
; on Tue Aug 20 23:28:21 2013
;

HUC	= 1

	.include "startup.asm"
	.data
	.bank DATA_BANK

	.code

;----------------------------------------------------------------------------------------
; these are the various registers on the PSG. Definately not complete
;----------------------------------------------------------------------------------------
ChannelSelect       equ    $0800
MainVolume          equ    $0801
ChanFreqLo          equ    $0802
ChanFreqHi          equ    $0803
ChanControl         equ    $0804
ChanBalance         equ    $0805
ChanData            equ    $0806
ChanON              equ    $80
ChanDDA             equ    $40
ChanVolume          equ    $1F
;----------------------------------------------------------------------------------------
; these are useful masks for dealing with the psg.
;----------------------------------------------------------------------------------------
ChanXFer            equ    $0           ; transfer to channel
ChanReset           equ    $40          ; channel off, dda On => reset
LeftVolume          equ    $F0
RightVolume         equ    $0F
;----------------------------------------------------------------------------------------
; these are the various CD-BIOS MML Functions. Definately not complete
;----------------------------------------------------------------------------------------
PSGF_ON			.equ	$00
PSGF_OFF		.equ    $01
PSGF_INIT		.equ	$02
PSGF_BANK		.equ    $03			; already defined 
PSGF_TRACK  		.equ    $04
PSGF_WAVE		.equ    $05
PSGF_ENV		.equ    $06
PSGF_FM			.equ    $07
PSGF_PE			.equ    $08
PSGF_PC			.equ    $09
PSGF_TEMPO		.equ	$10
PSGF_PLAY		.equ	$0B
PSGF_MSTAT		.equ	$0c
PSGF_SSTAT		.equ	$0D
PSGF_MSTOP		.equ	$0E
PSGF_SSTOP		.equ    $0F
PSGF_ASTOP		.equ    $10
PSGF_MVOFF 		.equ    $11
PSGF_CONT    	.equ	$12
PSGF_FDOUT		.equ	$13
PSGF_DCNT		.equ	$14
	.proc _psgInit
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_INIT
    sta		<_dh
    ;-----------------------------------------------------------------
	; get parameter off stack
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    ;-----------------------------------------------------------------
	; save it, and call bios.
    ;-----------------------------------------------------------------
	sta 	<_al     	; _al is driver system number
    jsr		psg_bios
LL1:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgOn
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_ON
    sta		<_dh
    ;-----------------------------------------------------------------
	; get parameter off stack
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    ;-----------------------------------------------------------------
	; save it, and call bios.
    ;-----------------------------------------------------------------
    sta	<_al          ; irq to use. 1 = vsync
                      ;             0 = timer
    jsr	psg_bios
LL2:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgOff
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_OFF
    sta		<_dh          ; save function
    ;-----------------------------------------------------------------
	; no parameters: just call bios.
    ;-----------------------------------------------------------------
    jsr		psg_bios
LL3:

	  rts
	.endp

	.proc _psgRegisterBank
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_BANK
    sta		<_dh          ; save function
    ;-----------------------------------------------------------------
	; get parameters off stack and save them
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     <_ah
    ldy     #2	
	lda		[__stack],Y
    sta     <_al
    ;-----------------------------------------------------------------
	; and call bios.
    ;-----------------------------------------------------------------
	jsr 	psg_bios
LL4:

	__addmi	4,__stack
	  rts
	.endp

	.proc _psgRegisterTrack
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_TRACK
    sta		<_dh          ; save function
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     <_al
	iny
	lda		[__stack],Y
    sta     <_ah
    ;-----------------------------------------------------------------
	; and call bios.
    ;-----------------------------------------------------------------
	jsr 	psg_bios
LL5:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgRegisterWave
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_WAVE
    sta		<_dh          ; save function
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
	iny
	lda		[__stack],Y
    sta     _ah
    ;-----------------------------------------------------------------
	; and call bios.
    ;-----------------------------------------------------------------
	jsr 	psg_bios
LL6:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgRegisterEnvelope
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_ENV
    sta		<_dh          ; save function
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
	iny
	lda		[__stack],Y
    sta     _ah
    ;-----------------------------------------------------------------
	; and call bios.
    ;-----------------------------------------------------------------
	jsr 	psg_bios
LL7:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgRegisterFM
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_FM
    sta		<_dh          ; save function
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
	iny
	lda		[__stack],Y
    sta     _ah
    ;-----------------------------------------------------------------
	; and call bios.
    ;-----------------------------------------------------------------
	jsr 	psg_bios
LL8:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgRegisterPE
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_PE
    sta		<_dh          ; save function
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
	iny
	lda		[__stack],Y
    sta     _ah
    ;-----------------------------------------------------------------
	; and call bios.
    ;-----------------------------------------------------------------
	jsr 	psg_bios
LL9:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgRegisterPC
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_PC
    sta		<_dh          ; save function
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
	iny
	lda		[__stack],Y
    sta     _ah
    ;-----------------------------------------------------------------
	; and call bios.
    ;-----------------------------------------------------------------
	jsr 	psg_bios
LL10:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgPlay
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_PLAY
	sta		<_dh
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
    stz     _ah
    ;-----------------------------------------------------------------
	; and call bios.
    ;-----------------------------------------------------------------
	jsr 	psg_bios
LL11:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgMStat
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_MSTAT
    sta		<_dh         ; set function number
    ;-----------------------------------------------------------------
	; read track status and return.
    ;-----------------------------------------------------------------
	jsr		psg_bios     ; get status
	tax
	lda		#0			 ; clear high byte of status
LL12:

	  rts
	.endp

	.proc _psgSStat
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_SSTAT
	sta		<_dh          ; set function number
    ;-----------------------------------------------------------------
	; read track status and return.
    ;-----------------------------------------------------------------
	jsr		psg_bios      ; get status
	tax
	lda		#0            ; clear high byte
LL13:

	  rts
	.endp

	.proc _psgMStop
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_MSTOP
    sta		<_dh          ; set function number
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
    stz     _ah
    ;-----------------------------------------------------------------
	; read track status and return.
    ;-----------------------------------------------------------------
    jsr		psg_bios
	lda		#$0
LL14:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgSStop
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_SSTOP
    sta		<_dh          ; set function number
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
    stz     _ah
    ;-----------------------------------------------------------------
	; read track status and return.
    ;-----------------------------------------------------------------
    jsr		psg_bios
	lda		#0
LL15:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgAllStop
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_ASTOP
    sta		<_dh          ; set function number
    ;-----------------------------------------------------------------
	; and call bios to stop everything
    ;-----------------------------------------------------------------
    jsr		psg_bios
LL16:

	  rts
	.endp

	.proc _psgMute
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_MVOFF
    sta		<_dh          ; set function number
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
    stz     _ah
    ;-----------------------------------------------------------------
	; and call bios to mute tracks
    ;-----------------------------------------------------------------
    jsr		psg_bios
LL17:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgCont
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_CONT
    sta		<_dh          ; set function number
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
    stz     _ah
    ;-----------------------------------------------------------------
	; ask bios to continue tracks.
    ;-----------------------------------------------------------------
    jsr		psg_bios
LL18:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgFadeOut
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_FDOUT
    sta		<_dh          ; set function number
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
    stz     _ah
    ;-----------------------------------------------------------------
	; ask bios to fade tracks.
    ;-----------------------------------------------------------------
    jsr		psg_bios
LL19:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgDelay
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_DCNT
    sta		<_dh          ; set function number
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
    ;-----------------------------------------------------------------
	; ask bios to fade tracks.
    ;-----------------------------------------------------------------
    jsr		psg_bios
LL20:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgTempo
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_TEMPO
    sta		<_dh          ; set function number
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
    ;-----------------------------------------------------------------
	; ask bios to fade tracks.
    ;-----------------------------------------------------------------
    jsr		psg_bios
LL21:

	__addmi	2,__stack
	  rts
	.endp

	.proc _sngInit
;-----------------
; set bank values 
;
	lda 	#$03
	sta	<_dh
	lda	#BANK(_sngBank1)
	sta	<_al
	lda	#BANK(_sngBank2)
	sta	<_ah
	jsr	psg_bios
;--------------------------------
; set track index table location 
;
	lda    #$04
	sta    <_dh
	lda	#LOW(TRACK_IX)
	sta	<_al
	lda	#HIGH(TRACK_IX)
	sta	<_ah
	jsr	psg_bios
;--------------------
; register modulation 
;
	lda	#7
	sta	<_dh
	lda	#LOW(MODU_IX)
	sta	<_al
	lda	#HIGH(MODU_IX)
	sta	<_ah
	jsr	psg_bios
;--------------------
; register percussion 
;
	lda	#9
	sta	<_dh
	lda	#LOW(DRUM_TAB)
	sta	<_al
	lda	#HIGH(DRUM_TAB)
	sta	<_ah
	jsr	psg_bios
;--------------------
; Set Tempo 
;
	lda	#10
	sta	<_dh
	lda	#75
	sta	<_al
	jsr	psg_bios
LL22:

	  rts
	.endp

    .data
    .bank   9
    .org    $8000
_sngBank1:
    .include  "mml/MyMML.asm"
    .code
    .data
    .bank   10
    .org    $A000
_sngBank2:
    .include  "mml/MyMML2.asm"
    .code
	.proc _fps
	__ldb	_ss
	  stx	__foo
	  call	_clock_hh
	  stx	_hh
	  call	_clock_mm
	  stx	_mm
	  call	_clock_ss
	  stx	_ss
	__ldb	__f
	__addwi	1
	  stx	__f
	__subwi	1
	__ldb	_ss
	__pushw
	__ldb	__foo
	  jsr	ne
	__lbeq	LL24
	__ldb	__f
	  stx	__fps
	__ldwi	0
	  stx	__f
	__ldb	__fps
	__phw	4,4
	__ldwi	2
	__phb	2
	__ldwi	15
	__phb	1
	__ldwi	27
	  call	_put_number.4
LL24:

LL23:

	  rts
	.endp

	.data
	.dw $0
_p0_pal_data:
	.incpal "gfx/spr0.pcx"
	.code
	.data
	.dw $0
_p0_spr_data:
	.incspr "gfx/spr0.pcx"
	.code
	.data
	.dw $0
_en_pal_data:
	.incpal "gfx/enemies.pcx"
	.code
	.data
	.dw $0
_en_spr_data:
	.incspr "gfx/enemies.pcx"
	.code
	.data
	.dw $0
_en_spr_data2:
	.incspr "gfx/enemies2.pcx"
	.code
	.data
	.dw $1000
_tileset__data__:
	.inctile "gfx/tileset.pcx",0,0,20,8
	.code
	.data
	.dw $0
_tile_pal:
	.incpal "gfx/tileset.pcx"
	.code
	.data
	.dw $0
_tilemap:
	.incbin "gfx/background.fmp"

	.code
	.data
	.dw $0800
_neo_font:
	.incchr "gfx/font.pcx"
	.code
	.data
	.dw $0
_neo_font_pal:
	.incpal "gfx/font.pcx"
	.code
	.proc _loopSong
	  call	_psgMStat
	__stw	_psgMainStatus
	  call	_psgSStat
	__stw	_psgSubStatus
	__ldw	_psgMainStatus
	__stw	<__temp
	__ldwi	0
	  jsr	eqzp
	__lbeq	LL26
	__ldb	_music
	__addwi	2
	  call	_psgPlay
LL26:

LL25:

	  rts
	.endp

	.data
	.dw $0
_badge1pal:
	.incpal "gfx/badge1tiles.pcx"
	.code
	.data
	.dw $1000
_neotiles__data__:
	.inctile "gfx/NEO_BADGE_16.pcx",0,0,14,14
	.code
	.data
	.dw $0
_neosprpal:
	.incpal "gfx/text.pcx"
	.code
	.data
	.dw $0
_neospr:
	.incspr "gfx/text.pcx"
	.code
	.data
	.dw $1000
_title_tiles__data__:
	.inctile "gfx/title1.pcx",0,0,16,4
	.code
	.data
	.dw $0
_title_pal:
	.incpal "gfx/title1.pcx"
	.code
	.proc _squirrelsplash
	  call	_disp_off
	  call	_cls
	__ldwi	6
	__stw	_foo
	__ldwi	LL0+420
	__phw	3,3
	__ldwi	0
	__phb	1
	__ldw	_foo
	  call	_put_string.3
	__ldwi	LL0+453
	__phw	3,3
	__ldwi	0
	__phb	1
	__ldwi	2
	__addw	_foo
	  call	_put_string.3
	__ldwi	LL0+486
	__phw	3,3
	__ldwi	0
	__phb	1
	__ldwi	4
	__addw	_foo
	  call	_put_string.3
	__ldwi	LL0+519
	__phw	3,3
	__ldwi	0
	__phb	1
	__ldwi	6
	__addw	_foo
	  call	_put_string.3
	__ldwi	LL0+552
	__phw	3,3
	__ldwi	0
	__phb	1
	__ldwi	8
	__addw	_foo
	  call	_put_string.3
	__ldw	_foo
	incw	_foo
	__ldwi	LL0+585
	__phw	3,3
	__ldwi	0
	__phb	1
	__ldwi	12
	__addw	_foo
	  call	_put_string.3
	__ldwi	LL0+618
	__phw	3,3
	__ldwi	0
	__phb	1
	__ldwi	14
	__addw	_foo
	  call	_put_string.3
	  call	_disp_on
	__ldwi	0
	__stw	_bar
LL28:

	__ldwi	1
	__tstw
	__lbeq	LL29
	__ldw	_joy0
	__stw	_lastjoy0
	  ldy	#0
	  call	_vsync
	__ldw	_bar
	incw	_bar
	__ldwi	0
	  call	_joy
	__stw	_joy0
	__ldw	_joy0
	__andwi	8
	__tstw
	__lbeq	LL30
	__lbra	LL29
LL30:

	__ldw	_bar
	__stw	<__temp
	__ldwi	90
	  jsr	gtzp
	__lbeq	LL31
	__lbra	LL29
LL31:

	__lbra	LL28
LL29:

	  call	_cls
LL32:

	__ldw	_joy0
	__andwi	8
	__tstw
	__lbeq	LL33
	  ldy	#0
	  call	_vsync
	__ldwi	0
	  call	_joy
	__stw	_joy0
	__lbra	LL32
LL33:

LL27:

	  rts
	.endp

	.proc _neosplash
	  call	_disp_off
	  call	_cls
	__ldwi	16
	  stx	_al
	__farptr	_neosprpal,_bl,_si
	__ldwi	1
	  stx	_cl
	  call	_load_palette.3
	__ldwi	20480
	__stw	_di
	__farptr	_neospr,_bl,_si
	__ldwi	1024
	__stw	_cx
	  call	_load_vram.3
	__ldwi	0
	  stx	_al
	__farptr	_badge1pal,_bl,_si
	__ldwi	1
	  stx	_cl
	  call	_load_palette.3
	__ldwi	_neotiles
	__stw	_di
	  call	_set_tile_data.1
	__ldwi	4096
	  call	_load_tile
	__ldwi	0
	__stw	_j
LL35:

	__ldw	_j
	__stw	<__temp
	__ldwi	14
	  jsr	ltzp
	__lbne	LL37
	__lbra	LL38
LL36:

	__ldw	_j
	incw	_j
	__lbra	LL35
LL37:

	__ldwi	0
	__stw	_i
LL39:

	__ldw	_i
	__stw	<__temp
	__ldwi	14
	  jsr	ltzp
	__lbne	LL41
	__lbra	LL42
LL40:

	__ldw	_i
	incw	_i
	__lbra	LL39
LL41:

	__ldw	_j
	__pushw
	__ldwi	14
	  jsr	smul
	__addw	_i
	__stw	_dx
	__ldw	_i
	__addwi	1
	  stx	_al
	__ldw	_j
	  call	_put_tile.3
	__lbra	LL40
LL42:

	__lbra	LL36
LL38:

	__ldwi	0
	__stw	_i
LL43:

	__ldw	_i
	__stw	<__temp
	__ldwi	8
	  jsr	ltzp
	__lbne	LL45
	__lbra	LL46
LL44:

	__ldw	_i
	incw	_i
	__lbra	LL43
LL45:

	__ldw	_i
	  call	_spr_set
	__ldwi	0
	  call	_spr_pal
	__ldwi	1
	  call	_spr_pri
	__ldwi	49
	  stx	_al
	__ldwi	1
	  call	_spr_ctrl.2
	__ldwi	20480
	__pushw
	__ldwi	128
	__pushw
	__ldw	_i
	  jsr	smul
	__addws
	  call	_spr_pattern
	__ldwi	200
	  call	_spr_y
	__ldw	_i
	__pushw
	__ldwi	32
	  jsr	smul
	  call	_spr_x
	__lbra	LL44
LL46:

	  call	_disp_on
	__ldwi	0
	__stw	_t
LL47:

LL48:

LL49:

	__ldw	_t
	incw	_t
	  ldy	#0
	  call	_vsync
	__ldwi	0
	  call	_joy
	__stw	_joy0
	  ldy	#0
	  call	_satb_update
	__ldw	_joy0
	__andwi	8
	__tstw
	__lbeq	LL51
	__lbra	LL50
LL51:

	__ldw	_t
	__stw	<__temp
	__ldwi	144
	  jsr	gtzp
	__lbeq	LL52
	__lbra	LL50
LL52:

	__lbra	LL49
LL50:

	__ldwi	0
	  call	_psgPlay
	  call	_disp_off
	__ldwi	0
	__stw	_i
LL53:

	__ldw	_i
	__stw	<__temp
	__ldwi	8
	  jsr	ltzp
	__lbne	LL55
	__lbra	LL56
LL54:

	__ldw	_i
	incw	_i
	__lbra	LL53
LL55:

	__ldw	_i
	  call	_spr_set
	  ldy	#0
	  call	_spr_hide
	__lbra	LL54
LL56:

	  ldy	#0
	  call	_satb_update
	  call	_cls
	__ldwi	0
	__stw	_color_reg
	__ldwi	0
	__stw	_color_data
	__ldwi	256
	__stw	_color_reg
	__ldwi	0
	__stw	_color_data
	  call	_disp_on
LL57:

	__ldw	_joy0
	__andwi	8
	__tstw
	__lbeq	LL58
	  ldy	#0
	  call	_vsync
	__ldwi	0
	  call	_joy
	__stw	_joy0
	__lbra	LL57
LL58:

LL34:

	  rts
	.endp

	.proc _title
	__ldwi	2
	  call	_psgPlay
	  call	_cls
	__ldwi	_title_tiles
	__stw	_di
	  call	_set_tile_data.1
	__ldwi	4096
	  call	_load_tile
	__ldwi	15
	  stx	_al
	__farptr	_title_pal,_bl,_si
	__ldwi	1
	  stx	_cl
	  call	_load_palette.3
	__ldwi	0
	__stw	_i
LL60:

	__ldw	_i
	__stw	<__temp
	__ldwi	16
	  jsr	ltzp
	__lbne	LL62
	__lbra	LL63
LL61:

	__ldw	_i
	incw	_i
	__lbra	LL60
LL62:

	__ldwi	0
	__stw	_j
LL64:

	__ldw	_j
	__stw	<__temp
	__ldwi	4
	  jsr	ltzp
	__lbne	LL66
	__lbra	LL67
LL65:

	__ldw	_j
	incw	_j
	__lbra	LL64
LL66:

	__ldw	_j
	__pushw
	__ldwi	16
	  jsr	smul
	__addw	_i
	__stw	_dx
	__ldw	_i
	  stx	_al
	__ldw	_j
	__addwi	1
	  call	_put_tile.3
	__lbra	LL65
LL67:

	__lbra	LL61
LL63:

	__ldwi	0
	__stw	_i
LL68:

	__ldw	_i
	__stw	<__temp
	__ldwi	8
	  jsr	ltzp
	__lbne	LL70
	__lbra	LL71
LL69:

	__ldw	_i
	incw	_i
	__lbra	LL68
LL70:

	__ldwi	241
	__addw	_i
	__stw	_color_reg
	__ldwi	0
	  stx	_al
	__ldwi	7
	__subw	_i
	  stx	_ah
	__ldwi	0
	  call	_set_color_rgb.4
	__ldwi	248
	__addw	_i
	__stw	_color_reg
	__ldw	_i
	  stx	_al
	__ldwi	7
	  stx	_ah
	__ldw	_i
	  call	_set_color_rgb.4
	__ldwi	255
	__addw	_i
	__stw	<__temp
	__ldwi	256
	  jsr	ltzp
	__lbeq	LL72
	__ldwi	255
	__addw	_i
	__stw	_color_reg
	__ldwi	7
	  stx	_al
	__ldw	_i
	  stx	_ah
	__ldwi	7
	  call	_set_color_rgb.4
LL72:

	__lbra	LL69
LL71:

	__ldwi	1
	__pushw
	__ldwi	21
	__pushw
	__ldwi	30
	__pushw
	__ldwi	6
	  call	_draw_win
	__ldwi	LL0+651
	__phw	3,3
	__ldwi	0
	__phb	1
	__ldwi	1
	  call	_put_string.3
	__ldw	_hiscore
	__phw	4,4
	__ldwi	5
	__phb	2
	__ldwi	11
	__phb	1
	__ldwi	1
	  call	_put_number.4
	__ldb	_hilevel
	__phw	4,4
	__ldwi	1
	__phb	2
	__ldwi	30
	__phb	1
	__ldwi	1
	  call	_put_number.4
	__ldwi	LL0+683
	__phw	3,3
	__ldwi	2
	__phb	1
	__ldwi	22
	  call	_put_string.3
	__ldwi	LL0+712
	__phw	3,3
	__ldwi	2
	__phb	1
	__ldwi	24
	  call	_put_string.3
	__ldwi	LL0+741
	__phw	3,3
	__ldwi	2
	__phb	1
	__ldwi	25
	  call	_put_string.3
	__ldwi	LL0+770
	__phw	3,3
	__ldwi	8
	__phb	1
	__ldwi	15
	  call	_put_string.3
	__ldwi	1
	__stw	_foo
	__ldwi	0
	__stw	_t
LL73:

	__ldwi	1
	__tstw
	__lbeq	LL74
	__ldw	_rs
	incw	_rs
	__ldw	_joy0
	__stw	_lastjoy0
	  ldy	#0
	  call	_vsync
	__ldwi	0
	  call	_joy
	__stw	_joy0
	__ldw	_t
	incw	_t
	__ldw	_t
	__stw	<__temp
	__ldwi	30
	  jsr	gtzp
	__lbeq	LL75
	__ldw	_foo
	__stw	<__temp
	__ldwi	0
	  jsr	eqzp
	__lbeq	LL76
	__ldwi	LL0+788
	__phw	3,3
	__ldwi	8
	__phb	1
	__ldwi	15
	  call	_put_string.3
	__ldwi	1
	__stw	_foo
	__ldwi	0
	__stw	_t
	__lbra	LL77
LL76:

	__ldwi	LL0+806
	__phw	3,3
	__ldwi	8
	__phb	1
	__ldwi	15
	  call	_put_string.3
	__ldwi	0
	__stw	_foo
	__ldwi	0
	__stw	_t
LL77:

LL75:

	__ldw	_joy0
	__andwi	8
	__tstw
	__lbeq	LL78
	__lbra	LL74
LL78:

	  call	_title_color_cycle
	__lbra	LL73
LL74:

LL79:

	__ldw	_joy0
	__andwi	8
	__tstw
	__lbeq	LL80
	  ldy	#0
	  call	_vsync
	__ldwi	0
	  call	_joy
	__stw	_joy0
	__lbra	LL79
LL80:

	__ldwi	LL0+824
	__phw	3,3
	__ldwi	8
	__phb	1
	__ldwi	15
	  call	_put_string.3
	__ldw	_rs
	  call	_srand
	  call	_config
LL59:

	  rts
	.endp

	.proc _title_color_cycle
	__ldwi	241
	__stw	_color_reg
	  call	_get_color.1
	__stw	_h
	__ldwi	1
	__stw	_i
LL82:

	__ldw	_i
	__stw	<__temp
	__ldwi	15
	  jsr	ltzp
	__lbne	LL84
	__lbra	LL85
LL83:

	__ldw	_i
	incw	_i
	__lbra	LL82
LL84:

	__ldwi	240
	__addw	_i
	__addwi	1
	__stw	_color_reg
	  call	_get_color.1
	__stw	_k
	__ldwi	240
	__addw	_i
	__stw	_color_reg
	__ldw	_k
	__stw	_color_data
	__lbra	LL83
LL85:

	__ldwi	255
	__stw	_color_reg
	__ldw	_h
	__stw	_color_data
LL81:

	  rts
	.endp

	.proc _config
	__ldwi	0
	  call	_psgPlay
	__ldwi	5
	__pushw
	__ldwi	13
	__pushw
	__ldwi	9
	__pushw
	__ldwi	5
	  call	_draw_win
	__ldwi	18
	__pushw
	__ldwi	13
	__pushw
	__ldwi	9
	__pushw
	__ldwi	5
	  call	_draw_win
	__ldwi	LL0+842
	__phw	3,3
	__ldwi	6
	__phb	1
	__ldwi	15
	  call	_put_string.3
	__ldwi	LL0+848
	__phw	3,3
	__ldwi	19
	__phb	1
	__ldwi	15
	  call	_put_string.3
	__ldb	_level
	__phw	4,4
	__ldwi	1
	__phb	2
	__ldwi	12
	__phb	1
	__ldwi	15
	  call	_put_number.4
	__ldb	_music
	__phw	4,4
	__ldwi	1
	__phb	2
	__ldwi	25
	__phb	1
	__ldwi	15
	  call	_put_number.4
	__ldwi	0
	__stw	_bar
	__ldwi	0
	__stw	_foo
LL87:

	__ldw	_bar
	__stw	<__temp
	__ldwi	0
	  jsr	eqzp
	__lbeq	LL88
	__ldwi	0
	  call	_psgPlay
	__ldwi	LL0+854
	__phw	3,3
	__ldwi	12
	__phb	1
	__ldwi	14
	  call	_put_string.3
	__ldwi	LL0+856
	__phw	3,3
	__ldwi	12
	__phb	1
	__ldwi	16
	  call	_put_string.3
LL89:

	__ldw	_foo
	__stw	<__temp
	__ldwi	0
	  jsr	eqzp
	__lbeq	LL90
	  call	_title_color_cycle
	__ldw	_joy0
	__stw	_lastjoy0
	  ldy	#0
	  call	_vsync
	__ldwi	0
	  call	_joy
	__stw	_joy0
	__ldw	_joy0
	__andwi	1
	__tstw
	__lbeq	LL92
	__ldw	_lastjoy0
	__andwi	1
	__notw
LL92:

	__boolw
	__tstw
	__lbne	LL93
	__ldw	_joy0
	__andwi	32
	__tstw
	__lbeq	LL94
	__ldw	_lastjoy0
	__andwi	32
	__notw
LL94:

	__boolw
LL93:

	__boolw
	__tstw
	__lbeq	LL91
	__ldwi	LL0+858
	__phw	3,3
	__ldwi	12
	__phb	1
	__ldwi	14
	  call	_put_string.3
	__ldwi	LL0+860
	__phw	3,3
	__ldwi	12
	__phb	1
	__ldwi	16
	  call	_put_string.3
	__ldwi	1
	__stw	_foo
	__ldwi	7
	  call	_psgPlay
LL91:

	__ldw	_joy0
	__andwi	16
	__tstw
	__lbeq	LL96
	__ldw	_lastjoy0
	__andwi	16
	__notw
LL96:

	__boolw
	__tstw
	__lbeq	LL95
	__ldb	_level
	__stw	<__temp
	__ldwi	9
	  jsr	ltzp
	__lbeq	LL97
	__ldb	_level
	__addwi	1
	  stx	_level
	__subwi	1
	__lbra	LL98
LL97:

	__ldwi	0
	  stx	_level
LL98:

	__ldb	_level
	__phw	4,4
	__ldwi	1
	__phb	2
	__ldwi	12
	__phb	1
	__ldwi	15
	  call	_put_number.4
	__ldwi	7
	  call	_psgPlay
	__lbra	LL99
LL95:

	__ldw	_joy0
	__andwi	64
	__tstw
	__lbeq	LL101
	__ldw	_lastjoy0
	__andwi	64
	__notw
LL101:

	__boolw
	__tstw
	__lbeq	LL100
	__ldb	_level
	__stw	<__temp
	__ldwi	0
	  jsr	gtzp
	__lbeq	LL102
	__ldb	_level
	__subwi	1
	  stx	_level
	__addwi	1
	__lbra	LL103
LL102:

	__ldwi	9
	  stx	_level
LL103:

	__ldb	_level
	__phw	4,4
	__ldwi	1
	__phb	2
	__ldwi	12
	__phb	1
	__ldwi	15
	  call	_put_number.4
	__ldwi	7
	  call	_psgPlay
LL100:

LL99:

	__ldw	_joy0
	__andwi	8
	__tstw
	__lbeq	LL105
	__ldw	_lastjoy0
	__andwi	8
	__notw
LL105:

	__boolw
	__tstw
	__lbeq	LL104
	__ldwi	255
	__stw	_foo
	__ldwi	1
	__stw	_bar
	__ldwi	7
	  call	_psgPlay
LL104:

	__lbra	LL89
LL90:

	__ldb	_music
	__addwi	2
	  call	_psgPlay
	__ldwi	LL0+862
	__phw	3,3
	__ldwi	25
	__phb	1
	__ldwi	14
	  call	_put_string.3
	__ldwi	LL0+864
	__phw	3,3
	__ldwi	25
	__phb	1
	__ldwi	16
	  call	_put_string.3
LL106:

	__ldw	_foo
	__stw	<__temp
	__ldwi	1
	  jsr	eqzp
	__lbeq	LL107
	  call	_loopSong
	  call	_title_color_cycle
	__ldw	_joy0
	__stw	_lastjoy0
	  ldy	#0
	  call	_vsync
	__ldwi	0
	  call	_joy
	__stw	_joy0
	__ldw	_joy0
	__andwi	2
	__tstw
	__lbeq	LL109
	__ldw	_lastjoy0
	__andwi	2
	__notw
LL109:

	__boolw
	__tstw
	__lbne	LL110
	__ldw	_joy0
	__andwi	128
	__tstw
	__lbeq	LL111
	__ldw	_lastjoy0
	__andwi	128
	__notw
LL111:

	__boolw
LL110:

	__boolw
	__tstw
	__lbeq	LL108
	__ldwi	LL0+866
	__phw	3,3
	__ldwi	25
	__phb	1
	__ldwi	14
	  call	_put_string.3
	__ldwi	LL0+868
	__phw	3,3
	__ldwi	25
	__phb	1
	__ldwi	16
	  call	_put_string.3
	__ldwi	0
	__stw	_foo
	__ldwi	7
	  call	_psgPlay
LL108:

	__ldw	_joy0
	__andwi	1
	__tstw
	__lbeq	LL113
	__ldw	_lastjoy0
	__andwi	1
	__notw
LL113:

	__boolw
	__tstw
	__lbeq	LL112
	__ldwi	255
	__stw	_foo
	__ldwi	1
	__stw	_bar
	__ldwi	7
	  call	_psgPlay
LL112:

	__ldw	_joy0
	__andwi	16
	__tstw
	__lbeq	LL115
	__ldw	_lastjoy0
	__andwi	16
	__notw
LL115:

	__boolw
	__tstw
	__lbeq	LL114
	__ldwi	7
	  call	_psgPlay
	__ldb	_music
	__stw	<__temp
	__ldwi	4
	  jsr	ltzp
	__lbeq	LL116
	__ldb	_music
	__addwi	1
	  stx	_music
	__subwi	1
	__lbra	LL117
LL116:

	__ldwi	0
	  stx	_music
LL117:

	__ldb	_music
	__phw	4,4
	__ldwi	1
	__phb	2
	__ldwi	25
	__phb	1
	__ldwi	15
	  call	_put_number.4
	__ldb	_music
	__addwi	2
	  call	_psgPlay
	__lbra	LL118
LL114:

	__ldw	_joy0
	__andwi	64
	__tstw
	__lbeq	LL120
	__ldw	_lastjoy0
	__andwi	64
	__notw
LL120:

	__boolw
	__tstw
	__lbeq	LL119
	__ldwi	7
	  call	_psgPlay
	__ldb	_music
	__stw	<__temp
	__ldwi	0
	  jsr	gtzp
	__lbeq	LL121
	__ldb	_music
	__subwi	1
	  stx	_music
	__addwi	1
	__lbra	LL122
LL121:

	__ldwi	4
	  stx	_music
LL122:

	__ldb	_music
	__phw	4,4
	__ldwi	1
	__phb	2
	__ldwi	25
	__phb	1
	__ldwi	15
	  call	_put_number.4
	__ldb	_music
	__addwi	2
	  call	_psgPlay
LL119:

LL118:

	__ldw	_joy0
	__andwi	8
	__tstw
	__lbeq	LL124
	__ldw	_lastjoy0
	__andwi	8
	__notw
LL124:

	__boolw
	__tstw
	__lbeq	LL123
	__ldwi	255
	__stw	_foo
	__ldwi	1
	__stw	_bar
	__ldwi	7
	  call	_psgPlay
LL123:

	__lbra	LL106
LL107:

	__lbra	LL87
LL88:

	  call	_cls
LL86:

	  rts
	.endp

	.proc _draw_win
	__pushw
	__ldwi	1
	__stw	_i
LL126:

	__ldw	_i
	__pushw
	__ldb_s	4
	__subwi	1
	  jsr	lt
	__lbne	LL128
	__lbra	LL129
LL127:

	__ldw	_i
	incw	_i
	__lbra	LL126
LL128:

	__ldwi	LL0+870
	__phw	3,3
	__ldb_s	6
	__addw	_i
	__phb	1
	__ldb_s	4
	  call	_put_string.3
	__ldwi	LL0+872
	__phw	3,3
	__ldb_s	6
	__addw	_i
	__phb	1
	__ldb_s	4
	__pushw
	__ldb_s	2
	__addws
	__subwi	1
	  call	_put_string.3
	__ldwi	1
	__stw	_j
LL130:

	__ldw	_j
	__pushw
	__ldb_s	2
	__subwi	1
	  jsr	lt
	__lbne	LL132
	__lbra	LL133
LL131:

	__ldw	_j
	incw	_j
	__lbra	LL130
LL132:

	__ldwi	LL0+874
	__phw	3,3
	__ldb_s	6
	__addw	_i
	__phb	1
	__ldb_s	4
	__addw	_j
	  call	_put_string.3
	__lbra	LL131
LL133:

	__lbra	LL127
LL129:

	__ldwi	1
	__stw	_i
LL134:

	__ldw	_i
	__pushw
	__ldb_s	2
	__subwi	1
	  jsr	lt
	__lbne	LL136
	__lbra	LL137
LL135:

	__ldw	_i
	incw	_i
	__lbra	LL134
LL136:

	__ldwi	LL0+876
	__phw	3,3
	__ldb_s	6
	__phb	1
	__ldb_s	4
	__addw	_i
	  call	_put_string.3
	__ldwi	LL0+878
	__phw	3,3
	__ldb_s	6
	__pushw
	__ldb_s	4
	__addws
	__subwi	1
	__phb	1
	__ldb_s	4
	__addw	_i
	  call	_put_string.3
	__lbra	LL135
LL137:

	__ldwi	LL0+880
	__phw	3,3
	__ldb_s	6
	__phb	1
	__ldb_s	4
	  call	_put_string.3
	__ldwi	LL0+882
	__phw	3,3
	__ldb_s	6
	__pushw
	__ldb_s	4
	__addws
	__subwi	1
	__phb	1
	__ldb_s	4
	  call	_put_string.3
	__ldwi	LL0+884
	__phw	3,3
	__ldb_s	6
	__phb	1
	__ldb_s	4
	__pushw
	__ldb_s	2
	__addws
	__subwi	1
	  call	_put_string.3
	__ldwi	LL0+886
	__phw	3,3
	__ldb_s	6
	__pushw
	__ldb_s	4
	__addws
	__subwi	1
	__phb	1
	__ldb_s	4
	__pushw
	__ldb_s	2
	__addws
	__subwi	1
	  call	_put_string.3
LL125:

	__addmi	8,__stack
	  rts
	.endp

	.proc _main
	__ldwi	0
	__stw	_rs
	__ldwi	5
	  stx	_level
	__ldwi	1
	  stx	_music
	__ldwi	20
	__stw	_hiscore
	__ldwi	0
	  stx	_hilevel
	  call	_init_satb
	__ldwi	1
	  call	_set_screen_size
	__ldwi	5
	  call	_psgInit
	__ldwi	0
	  call	_psgOn
	__ldwi	1
	  call	_psgPlay
	  call	_sngInit
	__ldwi	0
	  call	_psgDelay
	  call	_neosplash
	__farptr	_neo_font,_bl,_si
	__ldwi	224
	  stx	_cl
	  call	_load_font.2
	__ldwi	0
	  stx	_al
	__farptr	_neo_font_pal,_bl,_si
	__ldwi	1
	  stx	_cl
	  call	_load_palette.3
	__ldwi	1
	__stw	_color_reg
	__ldwi	7
	  stx	_al
	__ldwi	7
	  stx	_ah
	__ldwi	7
	  call	_set_color_rgb.4
	__ldwi	2
	__stw	_color_reg
	__ldwi	0
	  stx	_al
	__ldwi	2
	  stx	_ah
	__ldwi	0
	  call	_set_color_rgb.4
	  call	_squirrelsplash
LL139:

	__ldwi	1
	__tstw
	__lbeq	LL140
	  call	_title
	__ldwi	1
	  stx	_al
	__farptr	_tile_pal,_bl,_si
	__ldwi	1
	  stx	_cl
	  call	_load_palette.3
	__ldwi	_tileset
	__stw	_di
	  call	_set_tile_data.1
	__ldwi	4096
	  call	_load_tile
	__farptr	_tilemap,_bl,_si
	__ldwi	16
	__stw	_ax
	__ldwi	14
	  call	_set_map_data.3
	__ldwi	0
	  stx	_al
	__ldwi	0
	  stx	_ah
	__ldwi	0
	__phw	4,4
	__ldwi	0
	__phw	2
	__ldwi	16
	  stx	_dl
	__ldwi	14
	  stx	_dh
	  call	_load_map.6
	__ldwi	17
	  stx	_al
	__farptr	_p0_pal_data,_bl,_si
	__ldwi	1
	  stx	_cl
	  call	_load_palette.3
	__ldwi	18
	  stx	_al
	__farptr	_en_pal_data,_bl,_si
	__ldwi	1
	  stx	_cl
	  call	_load_palette.3
	__ldwi	20480
	__stw	_di
	__farptr	_p0_spr_data,_bl,_si
	__ldwi	2048
	__stw	_cx
	  call	_load_vram.3
	__ldwi	24576
	__stw	_di
	__farptr	_en_spr_data,_bl,_si
	__ldwi	768
	__stw	_cx
	  call	_load_vram.3
	__ldwi	_LD_en_num
	__pushw
	__ldb	_level
	__addws
	__ldb_p
	  stx	_num_en
	__ldwi	0
	__stw	_i
LL141:

	__ldw	_i
	__pushw
	__ldb	_num_en
	  jsr	lt
	__lbne	LL143
	__lbra	LL144
LL142:

	__ldw	_i
	incw	_i
	__lbra	LL141
LL143:

	__ldwi	0
	__addw	_i
	  call	_spr_set
	__ldwi	49
	  stx	_al
	__ldwi	17
	  call	_spr_ctrl.2
	__ldwi	18
	  call	_spr_pal
	__ldwi	1
	  call	_spr_pri
	__ldwi	_en_state
	__addw	_i
	__pushw
	__ldwi	0
	__stbps
	__lbra	LL142
LL144:

	__ldwi	128
	__stw	_p0x
	__ldwi	176
	__stw	_p0y
	__ldwi	52
	  call	_spr_set
	__ldwi	49
	  stx	_al
	__ldwi	17
	  call	_spr_ctrl.2
	__ldwi	136
	  stx	_al
	__ldwi	0
	  call	_spr_ctrl.2
	__ldwi	20480
	  call	_spr_pattern
	__ldwi	17
	  call	_spr_pal
	__ldwi	1
	  call	_spr_pri
	__ldwi	53
	  call	_spr_set
	__ldwi	49
	  stx	_al
	__ldwi	0
	  call	_spr_ctrl.2
	__ldwi	22016
	  call	_spr_pattern
	__ldwi	17
	  call	_spr_pal
	__ldwi	1
	  call	_spr_pri
	__ldwi	1
	__stw	_i
LL145:

	__ldw	_i
	__stw	<__temp
	__ldwi	10
	  jsr	ltzp
	__lbne	LL147
	__lbra	LL148
LL146:

	__ldw	_i
	incw	_i
	__lbra	LL145
LL147:

	__ldwi	53
	__addw	_i
	  call	_spr_set
	__ldwi	49
	  stx	_al
	__ldwi	0
	  call	_spr_ctrl.2
	__ldwi	22080
	  call	_spr_pattern
	__ldwi	17
	  call	_spr_pal
	__ldwi	1
	  call	_spr_pri
	__lbra	LL146
LL148:

	__ldwi	0
	  stx	_en_t
	__ldwi	128
	__stw	_k_moveleft
	__ldwi	32
	__stw	_k_moveright
	__ldwi	16
	__stw	_k_tongueup
	__ldwi	64
	__stw	_k_tonguedown
	__ldwi	8
	__stw	_k_pause
	__ldwi	0
	  stx	_p0dir
	__ldwi	0
	  stx	_p0state
	__ldwi	2
	  stx	_p0spd
	__ldwi	0
	__stw	_p0tongue
	__ldwi	4
	  stx	_p0tonguespd
	__ldwi	0
	__stw	_score
	__ldwi	0
	__stw	_time
	__ldwi	0
	  stx	_gameover
	__ldwi	0
	  stx	_en_wait
	__ldwi	_LD_en_delay
	__pushw
	__ldb	_level
	__addws
	__ldb_p
	  stx	_en_delay
	__ldwi	1
	__pushw
	__ldwi	23
	__pushw
	__ldwi	7
	__pushw
	__ldwi	5
	  call	_draw_win
	__ldwi	22
	__pushw
	__ldwi	23
	__pushw
	__ldwi	9
	__pushw
	__ldwi	5
	  call	_draw_win
	__ldwi	LL0+888
	__phw	3,3
	__ldwi	2
	__phb	1
	__ldwi	24
	  call	_put_string.3
	__ldb	_level
	__phw	4,4
	__ldwi	1
	__phb	2
	__ldwi	4
	__phb	1
	__ldwi	26
	  call	_put_number.4
	__ldwi	LL0+894
	__phw	3,3
	__ldwi	24
	__phb	1
	__ldwi	24
	  call	_put_string.3
	__ldwi	LL0+900
	__phw	3,3
	__ldwi	28
	__phb	1
	__ldwi	26
	  call	_put_string.3
	__ldwi	0
	__stw	_pdt
	__ldwi	0
	  stx	_pf
LL149:

	__ldwi	1
	__tstw
	__lbeq	LL150
	__ldb	_level
	__phw	4,4
	__ldwi	1
	__phb	2
	__ldwi	4
	__phb	1
	__ldwi	26
	  call	_put_number.4
	__ldw	_score
	__tstw
	__lbeq	LL151
	__ldw	_score
	__phw	4,4
	__ldwi	5
	__phb	2
	__ldwi	23
	__phb	1
	__ldwi	26
	  call	_put_number.4
LL151:

	__ldb	_p0state
	__stw	<__temp
	__ldwi	2
	  jsr	nezp
	__lbeq	LL152
	  call	_loopSong
LL152:

	__ldw	_joy0
	__stw	_lastjoy0
	  ldy	#0
	  call	_vsync
	__ldwi	0
	  call	_joy
	__stw	_joy0
	  ldy	#0
	  call	_satb_update
	__ldwi	52
	  call	_spr_set
	__ldb	_p0state
	__stw	<__temp
	__ldwi	2
	  jsr	nezp
	__lbeq	LL153
	__ldw	_joy0
	__pushw
	__ldw	_k_pause
	__andws
	__tstw
	__lbeq	LL155
	__ldw	_lastjoy0
	__pushw
	__ldw	_k_pause
	__andws
	__notw
LL155:

	__boolw
	__tstw
	__lbeq	LL154
	  call	_pause
LL154:

	__ldw	_joy0
	__pushw
	__ldw	_k_moveleft
	__andws
	__tstw
	__lbeq	LL156
	__ldw	_p0x
	__pushw
	__ldb	_p0spd
	__subws
	__stw	_p0x
	__ldw	_p0x
	__stw	<__temp
	__ldwi	0
	  jsr	ltzp
	__lbeq	LL157
	__ldwi	0
	__stw	_p0x
LL157:

	__ldb	_p0dir
	__stw	<__temp
	__ldwi	0
	  jsr	nezp
	__lbeq	LL158
	__ldwi	0
	  stx	_p0dir
	__ldwi	136
	  stx	_al
	__ldwi	0
	  call	_spr_ctrl.2
LL158:

	__lbra	LL159
LL156:

	__ldw	_joy0
	__pushw
	__ldw	_k_moveright
	__andws
	__tstw
	__lbeq	LL160
	__ldw	_p0x
	__pushw
	__ldb	_p0spd
	__addws
	__stw	_p0x
	__ldw	_p0x
	__stw	<__temp
	__ldwi	254
	  jsr	gtzp
	__lbeq	LL161
	__ldwi	254
	__stw	_p0x
LL161:

	__ldb	_p0dir
	__stw	<__temp
	__ldwi	1
	  jsr	nezp
	__lbeq	LL162
	__ldwi	1
	  stx	_p0dir
	__ldwi	136
	  stx	_al
	__ldwi	8
	  call	_spr_ctrl.2
LL162:

LL160:

LL159:

	__ldw	_p0x
	__subwi	15
	  call	_spr_x
	__ldw	_p0y
	__subwi	23
	  call	_spr_y
	__ldw	_joy0
	__pushw
	__ldw	_k_tongueup
	__andws
	__tstw
	__lbeq	LL163
	__ldb	_p0state
	__stw	<__temp
	__ldwi	1
	  jsr	nezp
	__lbeq	LL164
	__ldwi	1
	  stx	_p0state
	__ldwi	20736
	  call	_spr_pattern
LL164:

	__ldw	_p0tongue
	__pushw
	__ldb	_p0tonguespd
	__addws
	__stw	_p0tongue
	__ldw	_p0tongue
	__stw	<__temp
	__ldwi	144
	  jsr	gtzp
	__lbeq	LL165
	__ldwi	144
	__stw	_p0tongue
LL165:

	__lbra	LL166
LL163:

	__ldw	_joy0
	__pushw
	__ldw	_k_tonguedown
	__andws
	__tstw
	__lbeq	LL167
	__ldw	_p0tongue
	__pushw
	__ldb	_p0tonguespd
	__subws
	__stw	_p0tongue
	__ldw	_p0tongue
	__stw	<__temp
	__ldwi	0
	  jsr	lezp
	__lbeq	LL168
	__ldwi	0
	__stw	_p0tongue
	__ldb	_p0state
	__stw	<__temp
	__ldwi	0
	  jsr	nezp
	__lbeq	LL169
	__ldwi	0
	  stx	_p0state
	__ldwi	20480
	  call	_spr_pattern
LL169:

LL168:

LL167:

LL166:

	__lbra	LL170
LL153:

	__ldw	_pdt
	incw	_pdt
	__ldw	_pdt
	__pushw
	__ldwi	15
	  jsr	smod
	__stw	<__temp
	__ldwi	0
	  jsr	eqzp
	__lbeq	LL171
	__ldb	_pf
	__addwi	1
	  stx	_pf
	__subwi	1
	__ldb	_pf
	__stw	<__temp
	__ldwi	4
	  jsr	gezp
	__lbeq	LL172
	__ldwi	0
	  stx	_pf
LL172:

	__ldwi	20992
	__pushw
	__ldwi	256
	__pushw
	__ldb	_pf
	  jsr	smul
	__addws
	  call	_spr_pattern
LL171:

	__ldw	_pdt
	__stw	<__temp
	__ldwi	200
	  jsr	gtzp
	__lbeq	LL173
	__lbra	LL150
LL173:

LL170:

	__ldwi	53
	  call	_spr_set
	__ldb	_p0state
	__stw	<__temp
	__ldwi	1
	  jsr	nezp
	__lbeq	LL174
	  ldy	#0
	  call	_spr_hide
	__lbra	LL175
LL174:

	__ldw	_p0x
	__subwi	7
	  call	_spr_x
	__ldw	_p0y
	__subwi	32
	__subw	_p0tongue
	  call	_spr_y
LL175:

	__ldwi	1
	__stw	_i
LL176:

	__ldw	_i
	__stw	<__temp
	__ldwi	10
	  jsr	ltzp
	__lbne	LL178
	__lbra	LL179
LL177:

	__ldw	_i
	incw	_i
	__lbra	LL176
LL178:

	__ldwi	53
	__addw	_i
	  call	_spr_set
	__ldw	_p0tongue
	__pushw
	__ldw	_i
	__pushw
	__ldwi	16
	  jsr	smul
	__subwi	8
	  jsr	ge
	__lbeq	LL180
	__ldw	_p0x
	__subwi	7
	  call	_spr_x
	__ldw	_p0y
	__subwi	23
	__pushw
	__ldw	_i
	__pushw
	__ldwi	16
	  jsr	smul
	__subws
	  call	_spr_y
	__lbra	LL181
LL180:

	  ldy	#0
	  call	_spr_hide
LL181:

	__lbra	LL177
LL179:

	__ldb	_en_t
	__addwi	1
	  stx	_en_t
	__subwi	1
	__ldb	_en_t
	__pushw
	__ldwi	3
	  jsr	smod
	__stw	<__temp
	__ldwi	0
	  jsr	eqzp
	__lbeq	LL182
	__ldwi	24576
	__stw	_di
	__farptr	_en_spr_data2,_bl,_si
	__ldwi	128
	__stw	_cx
	  call	_load_vram.3
	__ldwi	25088
	__stw	_di
	__ldwi	1024
	__farptr_i	_en_spr_data,_bl,_si
	__ldwi	128
	__stw	_cx
	  call	_load_vram.3
	__lbra	LL183
LL182:

	__ldb	_en_t
	__pushw
	__ldwi	3
	  jsr	smod
	__stw	<__temp
	__ldwi	1
	  jsr	eqzp
	__lbeq	LL184
	__ldwi	24832
	__stw	_di
	__ldwi	512
	__farptr_i	_en_spr_data2,_bl,_si
	__ldwi	128
	__stw	_cx
	  call	_load_vram.3
	__ldwi	24576
	__stw	_di
	__farptr	_en_spr_data,_bl,_si
	__ldwi	128
	__stw	_cx
	  call	_load_vram.3
	__lbra	LL185
LL184:

	__ldb	_en_t
	__pushw
	__ldwi	3
	  jsr	smod
	__stw	<__temp
	__ldwi	2
	  jsr	eqzp
	__lbeq	LL186
	__ldwi	25088
	__stw	_di
	__ldwi	1024
	__farptr_i	_en_spr_data2,_bl,_si
	__ldwi	128
	__stw	_cx
	  call	_load_vram.3
	__ldwi	24832
	__stw	_di
	__ldwi	512
	__farptr_i	_en_spr_data,_bl,_si
	__ldwi	128
	__stw	_cx
	  call	_load_vram.3
LL186:

LL185:

LL183:

	__ldb	_en_wait
	__pushw
	__ldb	_en_delay
	  jsr	ge
	__lbeq	LL187
	__ldwi	0
	  stx	_en_wait
	__lbra	LL188
LL187:

	__ldb	_en_wait
	__addwi	1
	  stx	_en_wait
	__subwi	1
LL188:

	__ldwi	0
	  stx	_en_spawned
	__ldwi	0
	__stw	_i
LL189:

	__ldw	_i
	__pushw
	__ldb	_num_en
	  jsr	lt
	__lbne	LL191
	__lbra	LL192
LL190:

	__ldw	_i
	incw	_i
	__lbra	LL189
LL191:

	__ldwi	_en_state
	__addw	_i
	__ldb_p
	__stw	<__temp
	__ldwi	0
	  jsr	eqzp
	__lbeq	LL194
	__ldb	_en_spawned
	__notw
LL194:

	__boolw
	__tstw
	__lbeq	LL193
	  call	_spawn
	__ldwi	1
	  stx	_en_spawned
LL193:

	__ldwi	_en_state
	__addw	_i
	__ldb_p
	__stw	<__temp
	__ldwi	1
	  jsr	eqzp
	__lbeq	LL195
	__ldb	_en_wait
	__pushw
	__ldb	_en_delay
	  jsr	ge
	__lbeq	LL196
	__ldwi	_en_dir
	__addw	_i
	__ldb_p
	__stw	<__temp
	__ldwi	0
	  jsr	eqzp
	__lbeq	LL197
	__ldw	_i
	__aslw
	__addwi	_en_x
	__pushw
	__stw	__ptr
	__ldwp	__ptr
	__pushw
	__ldwi	_en_spd
	__addw	_i
	__ldb_p
	__subws
	__stwps
	__ldw	_i
	__aslw
	__addwi	_en_x
	__stw	__ptr
	__ldwp	__ptr
	__pushw
	__ldwi	16
	__negw
	  jsr	lt
	__lbeq	LL198
	__ldwi	_en_state
	__addw	_i
	__pushw
	__ldwi	0
	__stbps
LL198:

	__lbra	LL199
LL197:

	__ldw	_i
	__aslw
	__addwi	_en_x
	__pushw
	__stw	__ptr
	__ldwp	__ptr
	__pushw
	__ldwi	_en_spd
	__addw	_i
	__ldb_p
	__addws
	__stwps
	__ldw	_i
	__aslw
	__addwi	_en_x
	__stw	__ptr
	__ldwp	__ptr
	__stw	<__temp
	__ldwi	272
	  jsr	gtzp
	__lbeq	LL200
	__ldwi	_en_state
	__addw	_i
	__pushw
	__ldwi	0
	__stbps
LL200:

LL199:

LL196:

	__ldb	_p0state
	__stw	<__temp
	__ldwi	1
	  jsr	eqzp
	__lbeq	LL201
	__ldw	_i
	__aslw
	__addwi	_en_x
	__stw	__ptr
	__ldwp	__ptr
	__pushw
	__ldw	_p0x
	__addwi	8
	  jsr	lt
	__lbeq	LL203
	__ldw	_i
	__aslw
	__addwi	_en_x
	__stw	__ptr
	__ldwp	__ptr
	__pushw
	__ldw	_p0x
	__subwi	8
	  jsr	gt
LL203:

	__boolw
	__tstw
	__lbeq	LL202
	__ldw	_i
	__aslw
	__addwi	_en_y
	__stw	__ptr
	__ldwp	__ptr
	__pushw
	__ldw	_p0y
	__subwi	37
	__subw	_p0tongue
	  jsr	gt
	__lbeq	LL204
	__ldwi	_en_type
	__addw	_i
	__ldb_p
	__stw	<__temp
	__ldwi	2
	  jsr	eqzp
	__lbeq	LL205
	__ldwi	2
	  stx	_p0state
	__ldwi	0
	__stw	_p0tongue
	__ldwi	1
	  call	_psgPlay
	__ldwi	52
	  call	_spr_set
	__ldwi	20992
	  call	_spr_pattern
	__ldwi	9
	__pushw
	__ldwi	23
	__pushw
	__ldwi	12
	__pushw
	__ldwi	5
	  call	_draw_win
	__ldwi	LL0+903
	__phw	3,3
	__ldwi	11
	__phb	1
	__ldwi	25
	  call	_put_string.3
	__lbra	LL206
LL205:

	__ldwi	_en_state
	__addw	_i
	__pushw
	__ldwi	2
	__stbps
	__ldwi	9
	  call	_psgPlay
LL206:

LL204:

LL202:

LL201:

	__ldwi	0
	__addw	_i
	  call	_spr_set
	__ldw	_i
	__aslw
	__addwi	_en_x
	__stw	__ptr
	__ldwp	__ptr
	__pushw
	__ldwi	16
	__negw
	  jsr	gt
	__lbeq	LL208
	__ldw	_i
	__aslw
	__addwi	_en_x
	__stw	__ptr
	__ldwp	__ptr
	__stw	<__temp
	__ldwi	271
	  jsr	ltzp
LL208:

	__boolw
	__tstw
	__lbeq	LL207
	__ldw	_i
	__aslw
	__addwi	_en_x
	__stw	__ptr
	__ldwp	__ptr
	__subwi	16
	  call	_spr_x
	__ldw	_i
	__aslw
	__addwi	_en_y
	__stw	__ptr
	__ldwp	__ptr
	__subwi	16
	  call	_spr_y
	__lbra	LL209
LL207:

	  ldy	#0
	  call	_spr_hide
LL209:

LL195:

	__ldwi	_en_state
	__addw	_i
	__ldb_p
	__stw	<__temp
	__ldwi	2
	  jsr	eqzp
	__lbeq	LL210
	__ldw	_i
	__aslw
	__addwi	_en_x
	__pushw
	__ldw	_p0x
	__stwps
	__ldw	_i
	__aslw
	__addwi	_en_y
	__stw	__ptr
	__ldwp	__ptr
	__pushw
	__ldw	_p0y
	__subwi	34
	__subw	_p0tongue
	  jsr	lt
	__lbeq	LL211
	__ldw	_i
	__aslw
	__addwi	_en_y
	__pushw
	__ldw	_p0y
	__subwi	34
	__subw	_p0tongue
	__stwps
LL211:

	__ldwi	0
	__addw	_i
	  call	_spr_set
	__ldb	_p0state
	__stw	<__temp
	__ldwi	1
	  jsr	nezp
	__lbeq	LL212
	  ldy	#0
	  call	_spr_hide
	__ldb	_p0state
	__stw	<__temp
	__ldwi	2
	  jsr	nezp
	__lbeq	LL213
	__ldwi	_en_type
	__addw	_i
	__ldb_p
	__stw	<__temp
	__ldwi	0
	  jsr	eqzp
	__lbeq	LL214
	incw	_score
	__ldw	_score
	__lbra	LL215
LL214:

	__ldwi	_en_type
	__addw	_i
	__ldb_p
	__stw	<__temp
	__ldwi	1
	  jsr	eqzp
	__lbeq	LL216
	__ldw	_score
	__addwi	5
	__stw	_score
LL216:

LL215:

	__ldwi	7
	  call	_psgPlay
LL213:

	__ldwi	_en_state
	__addw	_i
	__pushw
	__ldwi	0
	__stbps
	__lbra	LL217
LL212:

	__ldw	_i
	__aslw
	__addwi	_en_x
	__stw	__ptr
	__ldwp	__ptr
	__subwi	16
	  call	_spr_x
	__ldw	_i
	__aslw
	__addwi	_en_y
	__stw	__ptr
	__ldwp	__ptr
	__subwi	16
	  call	_spr_y
LL217:

LL210:

	__lbra	LL190
LL192:

	__lbra	LL149
LL150:

	__ldw	_score
	__stw	<__temp
	__ldw	_hiscore
	  jsr	gezp
	__lbeq	LL218
	__ldw	_score
	__stw	_hiscore
	__ldb	_level
	  stx	_hilevel
LL218:

	  call	_disp_off
	__ldwi	0
	__stw	_i
LL219:

	__ldw	_i
	__stw	<__temp
	__ldwi	64
	  jsr	ltzp
	__lbne	LL221
	__lbra	LL222
LL220:

	__ldw	_i
	incw	_i
	__lbra	LL219
LL221:

	__ldw	_i
	  call	_spr_set
	  ldy	#0
	  call	_spr_hide
	__lbra	LL220
LL222:

	  ldy	#0
	  call	_satb_update
	  call	_cls
	  call	_disp_on
	__lbra	LL139
LL140:

LL138:

	  rts
	.endp

	.proc _spawn
	  call	_rand
	__stw	_foo
	__ldwi	_en_state
	__addw	_i
	__pushw
	__ldwi	1
	__stbps
	__ldwi	_en_dir
	__addw	_i
	__pushw
	__ldw	_foo
	__pushw
	__ldwi	2
	  jsr	smod
	__stbps
	__ldw	_foo
	__pushw
	__ldwi	100
	  jsr	smod
	__stw	_bar
	__ldw	_bar
	__pushw
	__ldwi	_LD_en_dragon_prob
	__pushw
	__ldb	_level
	__addws
	__ldb_p
	  jsr	lt
	__lbeq	LL224
	__ldwi	_en_type
	__addw	_i
	__pushw
	__ldwi	1
	__stbps
	__lbra	LL225
LL224:

	__ldw	_bar
	__pushw
	__ldwi	_LD_en_dragon_prob
	__pushw
	__ldb	_level
	__addws
	__ldb_p
	__pushw
	__ldwi	_LD_en_fly_prob
	__pushw
	__ldb	_level
	__addws
	__ldb_p
	__addws
	  jsr	lt
	__lbeq	LL226
	__ldwi	_en_type
	__addw	_i
	__pushw
	__ldwi	0
	__stbps
	__lbra	LL227
LL226:

	__ldwi	_en_type
	__addw	_i
	__pushw
	__ldwi	2
	__stbps
LL227:

LL225:

	__ldwi	_en_type
	__addw	_i
	__ldb_p
	__stw	<__temp
	__ldwi	1
	  jsr	eqzp
	__lbeq	LL228
	__ldwi	_en_spd
	__addw	_i
	__pushw
	__ldwi	2
	__stbps
	__lbra	LL229
LL228:

	__ldwi	_en_spd
	__addw	_i
	__pushw
	__ldwi	1
	__stbps
LL229:

	__ldwi	_en_dir
	__addw	_i
	__ldb_p
	__stw	<__temp
	__ldwi	0
	  jsr	eqzp
	__lbeq	LL230
	__ldw	_i
	__aslw
	__addwi	_en_x
	__pushw
	__ldwi	271
	__pushw
	__ldwi	16
	__pushw
	__ldw	_foo
	__pushw
	__ldwi	14
	  jsr	smod
	  jsr	smul
	__addws
	__stwps
	__lbra	LL231
LL230:

	__ldw	_i
	__aslw
	__addwi	_en_x
	__pushw
	__ldwi	256
	__negw
	__pushw
	__ldwi	16
	__pushw
	__ldw	_foo
	__pushw
	__ldwi	14
	  jsr	smod
	  jsr	smul
	__addws
	__stwps
LL231:

	__ldw	_i
	__aslw
	__addwi	_en_y
	__pushw
	__ldwi	16
	__pushw
	__ldwi	16
	__pushw
	__ldw	_foo
	__pushw
	__ldwi	9
	  jsr	smod
	  jsr	smul
	__addws
	__stwps
	__ldwi	0
	__addw	_i
	  call	_spr_set
	__ldwi	24576
	__pushw
	__ldwi	_en_type
	__addw	_i
	__ldb_p
	__pushw
	__ldwi	256
	  jsr	smul
	__addws
	  call	_spr_pattern
	__ldwi	136
	  stx	_al
	__ldwi	8
	__pushw
	__ldwi	_en_dir
	__addw	_i
	__ldb_p
	  jsr	smul
	  call	_spr_ctrl.2
LL223:

	  rts
	.endp

	.proc _pause
LL233:

	__ldw	_joy0
	__pushw
	__ldw	_k_pause
	__andws
	__tstw
	__lbeq	LL234
	  ldy	#0
	  call	_vsync
	__ldwi	0
	  call	_joy
	__stw	_joy0
	__lbra	LL233
LL234:

LL235:

	__ldw	_joy0
	__pushw
	__ldw	_k_pause
	__andws
	__notw
	__tstw
	__lbeq	LL236
	  ldy	#0
	  call	_vsync
	__ldwi	0
	  call	_joy
	__stw	_joy0
	__lbra	LL235
LL236:

LL237:

	__ldw	_joy0
	__pushw
	__ldw	_k_pause
	__andws
	__tstw
	__lbeq	LL238
	  ldy	#0
	  call	_vsync
	__ldwi	0
	  call	_joy
	__stw	_joy0
	__lbra	LL237
LL238:

LL232:

	  rts
	.endp

	.data
	.bank CONST_BANK
	.org $4000
LL0:
	.db	16,16,16,16,16,16,16,16
	.db	16,16,16,16,16,16,16,16
	.db	16,16,16,16,16,16,16,16
	.db	16,16,16,16,16,16,16,16
	.db	16,16,16,16,16,16,16,16
	.db	16,16,16,16,16,16,16,16
	.db	16,16,16,16,16,16,16,16
	.db	16,16,16,16,16,16,16,16
	.db	16,16,16,16,16,16,16,16
	.db	16,16,16,16,16,16,16,16
	.db	16,16,16,16,16,16,16,16
	.db	16,16,16,16,16,16,16,16
	.db	16,16,16,16,16,16,16,16
	.db	16,16,16,16,16,16,16,16
	.db	16,16,16,16,16,16,16,16
	.db	16,16,16,16,16,16,16,16
	.db	16,16,16,16,16,16,16,16
	.db	16,16,16,16,16,16,16,16
	.db	16,16,16,16,16,16,16,16
	.db	16,16,16,16,16,16,16,16
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,0,0,0,0
	.db	0,0,0,0,240,240,240,240
	.db	240,240,240,240,240,240,240,240
	.db	240,240,240,240,240,240,240,240
	.db	240,240,240,240,240,240,240,240
	.db	240,240,240,240,240,240,240,240
	.db	240,240,240,240,240,240,240,240
	.db	240,240,240,240,240,240,240,240
	.db	240,240,240,240,240,240,240,240
	.db	240,240,240,240,32,32,32,32
	.db	32,32,32,32,32,32,32,80
	.db	67,32,32,69,110,103,105,110
	.db	101,32,32,32,32,32,32,32
	.db	32,32,32,32,0,32,32,32
	.db	32,32,32,32,32,77,77,76
	.db	32,83,111,117,110,100,32,76
	.db	105,98,114,97,114,121,32,32
	.db	32,32,32,32,32,0,32,32
	.db	32,32,32,32,32,32,32,32
	.db	32,39,83,81,85,73,82,82
	.db	69,76,39,32,32,32,32,32
	.db	32,32,32,32,32,32,0,32
	.db	32,32,32,32,32,32,32,32
	.db	66,121,58,32,65,101,116,104
	.db	101,114,98,121,116,101,32,32
	.db	32,32,32,32,32,32,32,0
	.db	32,32,32,104,116,116,112,58
	.db	47,47,119,119,119,46,97,101
	.db	116,104,101,114,98,121,116,101
	.db	46,99,111,109,47,32,32,32
	.db	0,32,32,71,97,109,101,32
	.db	99,111,110,99,101,112,116,32
	.db	97,110,100,32,103,114,97,112
	.db	104,105,99,115,32,98,121,32
	.db	32,0,32,32,32,104,116,116
	.db	112,58,47,47,108,97,122,121
	.db	98,114,97,105,110,103,97,109
	.db	101,115,46,99,111,109,47,32
	.db	32,32,0,32,72,73,45,83
	.db	67,79,82,69,32,32,32,32
	.db	32,32,32,48,48,32,32,32
	.db	32,32,32,32,32,32,76,86
	.db	32,48,0,80,67,32,69,110
	.db	103,105,110,101,32,118,101,114
	.db	115,105,111,110,32,98,121,32
	.db	99,97,98,98,97,103,101,0
	.db	32,78,69,79,32,82,101,116
	.db	114,111,32,67,111,100,105,110
	.db	103,32,67,111,109,112,111,32
	.db	50,48,49,51,0,32,32,104
	.db	116,116,112,58,47,47,119,119
	.db	119,46,110,101,111,102,108,97
	.db	115,104,46,99,111,109,47,32
	.db	32,0,80,85,83,72,32,82
	.db	85,78,32,66,85,84,84,79
	.db	78,32,33,0,32,32,32,32
	.db	32,32,32,32,32,32,32,32
	.db	32,32,32,32,32,0,80,85
	.db	83,72,32,82,85,78,32,66
	.db	85,84,84,79,78,32,33,0
	.db	32,32,32,32,32,32,32,32
	.db	32,32,32,32,32,32,32,32
	.db	32,0,76,69,86,69,76,0
	.db	77,85,83,73,67,0,60,0
	.db	62,0,32,0,32,0,60,0
	.db	62,0,32,0,32,0,95,0
	.db	94,0,32,0,91,0,123,0
	.db	92,0,93,0,124,0,125,0
	.db	76,69,86,69,76,0,83,67
	.db	79,82,69,0,48,48,0,71
	.db	65,77,69,79,86,69,82,0
_LD_level_num:
	.db	1
	.db	2
	.db	3
	.db	4
	.db	5
	.db	6
	.db	7
	.db	8
	.db	9
	.db	10
_LD_en_num:
	.db	16
	.db	18
	.db	20
	.db	22
	.db	24
	.db	26
	.db	28
	.db	30
	.db	32
	.db	32
_LD_en_delay:
	.db	4
	.db	3
	.db	2
	.db	2
	.db	1
	.db	1
	.db	1
	.db	0
	.db	0
	.db	0
_LD_en_fly_prob:
	.db	45
	.db	45
	.db	50
	.db	50
	.db	50
	.db	50
	.db	50
	.db	40
	.db	35
	.db	20
_LD_en_dragon_prob:
	.db	45
	.db	40
	.db	30
	.db	25
	.db	20
	.db	15
	.db	10
	.db	10
	.db	5
	.db	5
_LD_en_wasp_prob:
	.db	10
	.db	15
	.db	20
	.db	25
	.db	30
	.db	35
	.db	40
	.db	50
	.db	60
	.db	75
_tileset:
	.dw	160
	.dw	16
	.dw	BANK(_tileset__data__)
	.dw	     _tileset__data__
	.dw	LL0+0
_neotiles:
	.dw	196
	.dw	16
	.dw	BANK(_neotiles__data__)
	.dw	     _neotiles__data__
	.dw	LL0+160
_title_tiles:
	.dw	64
	.dw	16
	.dw	BANK(_title_tiles__data__)
	.dw	     _title_tiles__data__
	.dw	LL0+356

	.bss
_track:		.ds	1
_mstat:		.ds	1
_sstat:		.ds	1
_VSyncCnt:		.ds	2
_TimerCnt:		.ds	2
_MainCnt:		.ds	2
_SubCnt:		.ds	2
_psgMainStatus:		.ds	2
_psgSubStatus:		.ds	2
_hh:		.ds	1
_mm:		.ds	1
_ss:		.ds	1
__f:		.ds	1
__fps:		.ds	1
__foo:		.ds	1
_rs:		.ds	2
_t:		.ds	2
_foo:		.ds	2
_bar:		.ds	2
_h:		.ds	2
_i:		.ds	2
_j:		.ds	2
_k:		.ds	2
_joy0:		.ds	2
_lastjoy0:		.ds	2
_joy1:		.ds	2
_lastjoy1:		.ds	2
_p0x:		.ds	2
_p0y:		.ds	2
_p0spd:		.ds	1
_p0dir:		.ds	1
_p0state:		.ds	1
_p0tonguespd:		.ds	1
_p0tongue:		.ds	2
_num_en:		.ds	1
_en_t:		.ds	1
_en_wait:		.ds	1
_en_delay:		.ds	1
_en_spawned:		.ds	1
_en_x:		.ds	72
_en_y:		.ds	72
_en_spd:		.ds	36
_en_dir:		.ds	36
_en_state:		.ds	36
_en_type:		.ds	36
_k_moveleft:		.ds	2
_k_moveright:		.ds	2
_k_tongueup:		.ds	2
_k_tonguedown:		.ds	2
_k_pause:		.ds	2
_gameover:		.ds	1
_level:		.ds	1
_hilevel:		.ds	1
_music:		.ds	1
_score:		.ds	2
_hiscore:		.ds	2
_time:		.ds	2
_pdt:		.ds	2
_pf:		.ds	1
__arg:

;0 error(s) in compilation
;	literal pool:912
;	constant pool:90
;	global pool:4992
;	Macro pool:1424
